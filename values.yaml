# Default helm values for n8n.
# Default values within the n8n application can be found under https://github.com/n8n-io/n8n/blob/master/packages/cli/config/index.ts
n8n:
  encryption_key: # n8n creates a random encryption key automatically on the first launch and saves it in the ~/.n8n folder. That key is used to encrypt the credentials before they get saved to the database.
defaults:

config:
  executions:
    pruneData: "true" # prune executions by default
    pruneDataMaxAge: 3760 # Per default we store 1 year of history

  # EXISTING SECRET AND SECRET ARE EXCLUSIVE, WITH EXISTINGSECRET TAKING PRIORITY.
  # We are setting details directly in the 'secret' section here for simplicity,
  # these values will be automatically placed into a K8s Secret by Helm.
  # If you had an existing Secret with these details, you would use existingSecret: "your-secret-name"
  # existingSecret: ""
  secret: # Dict with all n8n json config options, unlike config the values here will end up in a secret.
    database:
      postgresdb:
        # Dummy password - YOU WILL UPDATE THIS LATER IN KUBERNETES SECRET!
        password: 'dummy-n8n-password' # <--- DUMMY PASSWORD
        user: 'dummy-n8n-user'     # <--- DUMMY USERNAME
        database: 'dummy-n8n-db'   # <--- DUMMY DATABASE NAME (if not postgres)

## ALL possible n8n Values

database:
  type: postgresdb # <--- CHANGED: Set to postgresdb
  tablePrefix: # Prefix for table names - default: ''
  postgresdb:
    database: 'dummy-n8n-db' # <--- CHANGED: Connect to this database name
    host: 10.100.238.48 # <--- CHANGED: Your PostgreSQL Cluster IP
    # password: # This will come from the secret above
    port: 5432 # <--- CHANGED: PostgreSQL port
    user: 'dummy-n8n-user' # <--- CHANGED: Connect with this username
    schema: public # PostgresDB Schema - default: public
    ssl:
      rejectUnauthorized: false # Consider setting to true with proper SSL certs in production
credentials:
  overwrite:
    data: # Overwrites for credentials - default: "{}"
    endpoint: # Fetch credentials from API - default: ''

executions:
  process: own
  timeout: -1
  maxTimeout: 3600
  saveDataOnError: all
  saveDataOnSuccess: all
  saveDataManualExecutions: false
  pruneData: "true"
  pruneDataMaxAge: 3760
  pruneDataTimeout: 3600
generic:
  timezone: America/New_York # Consider changing to your local timezone, e.g., Asia/Kolkata
path: /
host: localhost # Will be overridden by Ingress/Cloudflare routing.
port: 5678 # n8n's default HTTP port
listen_address: 0.0.0.0
protocol: http # If you use HTTPS for your domain, you'll need SSL termination at Ingress/Cloudflare.
ssl_key:
ssl_cert:
security:
  excludeEndpoints:
  basicAuth:
    active: false
    user:
    password:
    hash: false
  jwtAuth:
    active: false
    jwtHeader:
    jwtHeaderValuePrefix:
    jwksUri:
    jwtIssuer:
    jwtNamespace:
    jwtAllowedTenantKey:
    jwtAllowedTenant:
endpoints:
  rest: rest
  webhook: webhook
  webhookTest: webhook-test
  webhookWaiting: webhook-waiting
externalHookFiles:
nodes:
  exclude: "[]"
  errorTriggerType: n8n-nodes-base.errorTrigger

# Set additional environment variables on the Deployment
extraEnv: {}
# Set this if running behind a reverse proxy and the external port is different from the port n8n runs on
#  WEBHOOK_URL: "https://n8n.myhost.com/" # You will likely need to set this later for webhooks to work correctly once you have your domain setup

# Set additional environment from existing secrets
extraEnvSecrets: {}

##
##
##
##
## Common Kubernetes Config Settings
persistence:
  ## If true, use a Persistent Volume Claim, If false, use emptyDir
  enabled: true # <--- CHANGED: Enable persistence
  type: dynamic # <--- CHANGED: Use dynamic provisioning
  ## Persistent Volume Storage Class
  storageClass: "ceph-block" # <--- CHANGED: Use your Ceph block storage class
  accessModes:
    - ReadWriteOnce
  size: 1Gi # <--- Size for n8n's internal data. Should be sufficient.
  # existingClaim:

replicaCount: 1

deploymentStrategy:
  type: "Recreate"

image:
  repository: n8nio/n8n
  pullPolicy: IfNotPresent
  tag: "" # Keep empty for latest stable from chart's appVersion

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: ""

podAnnotations: {}

podLabels: {}

podSecurityContext: {}

securityContext: {}

# here you can specify lifecycle hooks - it can be used e.g to easily add packages to the container without building
# your own docker image
lifecycle: {}

command: []

livenessProbe:
  httpGet:
    path: /healthz
    port: http
  # initialDelaySeconds: 30 # Default values are commented out but active.
  # periodSeconds: 10
  # timeoutSeconds: 5
  # failureThreshold: 6
  # successThreshold: 1

readinessProbe:
  httpGet:
    path: /healthz
    port: http
  # initialDelaySeconds: 30
  # periodSeconds: 10
  # timeoutSeconds: 5
  # failureThreshold: 6
  # successThreshold: 1

initContainers: []

service:
  type: ClusterIP # <--- CONFIRMED: ClusterIP, as Cloudflare handles external routing
  port: 80 # n8n's default internal port
  annotations: {}

ingress:
  enabled: false # <--- CONFIRMED: Disabled, as Cloudflare handles it externally
  annotations: {}
  hosts:
    - host: chart-example.local
      paths: []
  tls: []
  className: ""

workerResources:
  {}

webhookResources:
  {}

resources:
  # <--- CHANGED: Resource requests and limits for n8n
  requests:
    cpu: 500m # Request 0.5 CPU core
    memory: 512Mi # Request 0.5 GiB of RAM
  limits:
    cpu: 1 # Limit to 1 CPU core
    memory: 1Gi # Limit to 1 GiB of RAM

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations:
  # <--- CHANGED: Add toleration to run on master node
  - key: "node-role.kubernetes.io/control-plane"
    operator: "Exists"
    effect: "NoSchedule"

affinity: {}

scaling:
  enabled: false
  worker:
    count: 2
    concurrency: 2
  webhook:
    enabled: false
    count: 1
  redis:
    host:
    password:

## Bitnami Redis configuration (n8n can use Redis for queues/locks, but not for main data)
redis:
  enabled: false # Keep Redis disabled unless you need advanced n8n scaling
  architecture: standalone
  master:
    persistence:
      enabled: true
      existingClaim: ""
      size: 2Gi
